# ks.cfg
# Use text mode install
text

# Keyboard layouts
keyboard --xlayouts='us'
# System language
lang en_US.UTF-8

# Use network installation
url --url="https://repo.almalinux.org/almalinux/9.5/BaseOS/x86_64/os"

# Pre-installation script to detect SSDs 
%pre --erroronfail --log=pre-script.log
#!/bin/bash
# Log file path
LOGFILE="/root/pre-script.log"

# Create or clear the log file
: > "$LOGFILE"

# Find all MD devices manually and stop them one by one
echo "Stopping all MD devices found in /dev/..." | tee -a "$LOGFILE"
for md_device in $(ls /dev/ | grep '^md[0-9]\+'); do
    echo "Stopping /dev/$md_device..." | tee -a "$LOGFILE"
    mdadm --stop "/dev/$md_device" >> "$LOGFILE" 2>&1

    if [ $? -eq 0 ]; then
        echo "Successfully stopped /dev/$md_device." | tee -a "$LOGFILE"
    else
        echo "Failed to stop /dev/$md_device." | tee -a "$LOGFILE"
    fi
done

# List all partitions
PARTITIONS=$(lsblk -lnp -o NAME | grep -E '/dev/sd|/dev/nvme')

echo "Checking partitions for RAID metadata..." | tee -a "$LOGFILE"

for partition in $PARTITIONS; do
    echo "Examining $partition for RAID metadata..." | tee -a "$LOGFILE"

    # Check for RAID metadata
    mdadm --examine "$partition" >> "$LOGFILE" 2>&1

    if mdadm --examine "$partition" 2>&1 | grep -q "No md superblock detected"; then
        echo "No RAID metadata found on $partition." | tee -a "$LOGFILE"
    else
        echo "RAID metadata found on $partition. Zeroing superblock..." | tee -a "$LOGFILE"

        # Zero the superblock
        mdadm --zero-superblock "$partition" >> "$LOGFILE" 2>&1

        if [ $? -eq 0 ]; then
            echo "Successfully zeroed superblock on $partition." | tee -a "$LOGFILE"
        else
            echo "Failed to zero superblock on $partition." | tee -a "$LOGFILE"
        fi
    fi
done

echo "MD data cleared." | tee -a "$LOGFILE"
 
# Find the first two SSDs by checking the rotational flag
echo "Detecting SSD devices..." | tee -a "$LOGFILE"
SSD_DISKS=($(lsblk -d -o name,rota,type | grep ' 0 disk' | grep -v 'ram' | awk '{print $1}' | sort | head -n 2))

# Log the detected SSDs
echo "Detected SSDs: ${SSD_DISKS[*]}" | tee -a "$LOGFILE"

# Check if at least one SSD was found
if [ "${#SSD_DISKS[@]}" -lt 1 ]; then
    lsblk -d -o name,rota,type >> "$LOGFILE" 2>&1
    echo "Error: No SSDs found." | tee -a "$LOGFILE"
    exit 1
fi

# Generate clearpart devices argument
DRIVES=$(IFS=, ; echo "${SSD_DISKS[*]}")
echo "Clearpart devices line argument: ${DRIVES}" | tee -a "$LOGFILE"

# Generate partitioning file
echo "Generating partitioning configuration..." | tee -a "$LOGFILE"
if [ "${#SSD_DISKS[@]}" -eq 1 ]; then
    # Only one SSD found, configure without RAID
    echo "clearpart --drives=${SSD_DISKS[0]} --all --initlabel" > /tmp/partitioning.cfg
    echo "part /boot/efi --size=600 --asprimary --ondisk=${SSD_DISKS[0]} --fstype=\"efi\" --fsoptions=\"umask=0077,shortname=winnt\"" >> /tmp/partitioning.cfg
    echo "part /boot --size=1024 --asprimary --ondisk=${SSD_DISKS[0]} --fstype=\"ext4\"" >> /tmp/partitioning.cfg
    echo "part / --size=16200 --ondisk=${SSD_DISKS[0]} --fstype=\"xfs\"" >> /tmp/partitioning.cfg

    echo "Partitioning setup for a single SSD completed." | tee -a "$LOGFILE"
else
    # Two or more SSDs found, configure for RAID
    echo "clearpart --drives=${DRIVES} --all --initlabel" > /tmp/partitioning.cfg
    echo "part raid.11 --size=600 --asprimary --ondisk=${SSD_DISKS[0]} --fstype=\"mdmember\"" >> /tmp/partitioning.cfg
    echo "part raid.12 --size=600 --asprimary --ondisk=${SSD_DISKS[1]} --fstype=\"mdmember\"" >> /tmp/partitioning.cfg
    echo "part raid.21 --size=1024 --asprimary --ondisk=${SSD_DISKS[0]} --fstype=\"mdmember\"" >> /tmp/partitioning.cfg
    echo "part raid.22 --size=1024 --asprimary --ondisk=${SSD_DISKS[1]} --fstype=\"mdmember\"" >> /tmp/partitioning.cfg
    echo "part raid.31 --size=16200 --ondisk=${SSD_DISKS[0]} --fstype=\"mdmember\"" >> /tmp/partitioning.cfg
    echo "part raid.32 --size=16200 --ondisk=${SSD_DISKS[1]} --fstype=\"mdmember\"" >> /tmp/partitioning.cfg

    # RAID setup
    echo "raid /boot/efi --device=md1 --fstype=\"efi\" --level=RAID1 --fsoptions=\"umask=0077,shortname=winnt\" raid.11 raid.12" >> /tmp/partitioning.cfg
    echo "raid /boot --device=md2 --fstype=\"ext4\" --level=RAID1 raid.21 raid.22" >> /tmp/partitioning.cfg
    echo "raid / --device=md3 --fstype=\"xfs\" --level=RAID1 raid.31 raid.32" >> /tmp/partitioning.cfg

    echo "Partitioning and RAID setup for two SSDs completed." | tee -a "$LOGFILE"
 fi

echo "Script completed." | tee -a "$LOGFILE"                        
%end

%packages
@^server-product-environment

%end

# Do not configure the X Window System
skipx

# Reboot after installation
reboot

# Include and run partitioning file
%include /tmp/partitioning.cfg

# System timezone
timezone America/New_York --utc
timesource --ntp-server time1.google.com
timesource --ntp-server time2.google.com
timesource --ntp-server time3.google.com
timesource --ntp-server time.google.com

# Root password
rootpw --allow-ssh --iscrypted $6$xzli4sU84KZMo7Aj$BDCqQ4wIMSYUDfh8GIdO7KomInCZDLwIxo.Z6//Nmui91RDHoizWgQmPW2TwGqQ3wUrLTBY06CH0KVw7KYAMR0
